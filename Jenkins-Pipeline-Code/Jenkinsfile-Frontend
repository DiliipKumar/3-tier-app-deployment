pipeline {
    agent any
    environment {
        ECR_URL = 'public.ecr.aws/x4k1f4f2'
        IMAGE_NAME = 'three-tier-frontend'
        AWS_REGION = 'us-east-1' // Ensure this matches your actual ECR region
        SECRET_TEXT = credentials('github')
    }
    stages {
        stage('Checkout') {
            steps {
                script {
                    // Clone the whole repository
                    def repoDir = '3-tier-app-deployment'
                    checkout([$class: 'GitSCM',
                              branches: [[name: '*/main']],
                              doGenerateSubmoduleConfigurations: false,
                              extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: repoDir]],
                              submoduleCfg: [],
                              userRemoteConfigs: [[url: 'https://github.com/DiliipKumar/3-tier-app-deployment.git']]
                    ])
                    // Move to backend directory and configure git remote
                    dir("${repoDir}/Application-Code/frontend") {
                        echo "Checked out frontend directory"
                        // Add the remote repository if needed
                        sh 'git remote add origin https://github.com/DiliipKumar/3-tier-app-deployment.git || true'
                        // Verify the remote repository configuration
                        sh 'git remote -v'
                    }
                }
            }
        }
        stage('Determine Build Number') {
            steps {
                script {
                    env.BUILD_NUMBER = currentBuild.number.toString()
                }
            }
        }
        stage('Build and Push Docker Image') {
            steps {
                script {
                    dir('3-tier-app-deployment/Application-Code/frontend') {
                        // Login to AWS ECR
                        sh """
                        aws ecr-public get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${ECR_URL}
                        """
                        // Build the Docker image with build number tag
                        sh 'docker build -t ${IMAGE_NAME}:${BUILD_NUMBER} .'
                        // Tag the Docker image
                        sh 'docker tag ${IMAGE_NAME}:${BUILD_NUMBER} ${ECR_URL}/${IMAGE_NAME}:${BUILD_NUMBER}'
                        // Push the Docker image to ECR
                        sh 'docker push ${ECR_URL}/${IMAGE_NAME}:${BUILD_NUMBER}'
                    }
                }
            }
        }
        stage('Update Deployment file') {
            environment {
                GIT_REPO_NAME = "3-tier-app-deployment"
                GIT_USER_NAME = "DiliipKumar"
            }
            steps {
                dir('3-tier-app-deployment/Kubernetes-Manifests-file/Frontend') {
                    script {
                        // Update deployment.yaml with new image tag
                        sh '''
                            BUILD_NUMBER=${BUILD_NUMBER}
                            echo $BUILD_NUMBER
                            imageTag=$(grep -oP '(?<=frontend:)[^ ]+' deployment.yaml)
                            echo $imageTag
                            sed -i "s/${IMAGE_NAME}:${imageTag}/${IMAGE_NAME}:${BUILD_NUMBER}/" deployment.yaml
                            git add deployment.yaml
                            git commit -m "Update deployment Image to version ${BUILD_NUMBER}"
                            git push https://${GIT_USER_NAME}:${SECRET_TEXT}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
                        '''
                    }
                }
            }
        }
    }
}
